import java.util.*;

public class BFSTraversal {
    public static List<Integer> bfsTraversal(List<List<Integer>> adj) {
        List<Integer> traversalOrder = new ArrayList<>();
        if (adj == null || adj.isEmpty()) {
            return traversalOrder;
        }

        int vertices = adj.size();
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        // Start BFS from vertex 0
        queue.add(0);
        visited[0] = true;

        while (!queue.isEmpty()) {
            int currentVertex = queue.poll();
            traversalOrder.add(currentVertex);

            for (int neighbor : adj.get(currentVertex)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }

        return traversalOrder;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int vertices = scanner.nextInt();
        scanner.nextLine(); // Consume the newline

        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < vertices; i++) {
            System.out.print("Enter neighbors of vertex " + i + " (space-separated): ");
            String[] neighbors = scanner.nextLine().split(" ");
            List<Integer> neighborList = new ArrayList<>();
            for (String neighbor : neighbors) {
                if (!neighbor.isEmpty()) {
                    neighborList.add(Integer.parseInt(neighbor));
                }
            }
            adj.add(neighborList);
        }

        List<Integer> result = bfsTraversal(adj);
        System.out.println("BFS Traversal Order: " + result);

        scanner.close();
    }
}
