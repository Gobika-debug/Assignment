import java.util.*;

public class DFSTraversal {
    public static List<Integer> dfsTraversal(List<List<Integer>> adj) {
        List<Integer> traversalOrder = new ArrayList<>();
        if (adj == null || adj.isEmpty()) {
            return traversalOrder;
        }

        int vertices = adj.size();
        boolean[] visited = new boolean[vertices];
        Stack<Integer> stack = new Stack<>();

        stack.push(0);
        visited[0] = true;

        while (!stack.isEmpty()) {
            int currentVertex = stack.pop();
            traversalOrder.add(currentVertex);

            // To process neighbors in the order they appear, we push them in reverse order
            for (int i = adj.get(currentVertex).size() - 1; i >= 0; i--) {
                int neighbor = adj.get(currentVertex).get(i);
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    stack.push(neighbor);
                }
            }
        }

        return traversalOrder;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the number of vertices: ");
        int n = scanner.nextInt();
        scanner.nextLine(); // consume the newline
        
        List<List<Integer>> adj = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            System.out.print("Enter neighbors of vertex " + i + " separated by spaces: ");
            String[] neighbors = scanner.nextLine().trim().split("\\s+");
            List<Integer> neighborsList = new ArrayList<>();
            for (String neighbor : neighbors) {
                if (!neighbor.isEmpty()) {
                    neighborsList.add(Integer.parseInt(neighbor));
                }
            }
            adj.add(neighborsList);
        }

        List<Integer> result = dfsTraversal(adj);
        System.out.println("DFS Traversal Order: " + result);
    }
}
